#include <iostream>

using namespace std;

class fonteTensao   {
                    private: //atributo ou metodo nao é acessado fora do objeto. só o objeto pode modificar.
                    double vout; //tensao de saida
                    double vmin; //tensao minima permitida na fonte
                    double vmax; //

                    public: //acessiveis por outro objeto. qualquer um acessa.
                    fonteTensao(void);
                    fonteTensao(double vmin, double vmax);
                    ~fonteTensao(void);
                    double getv(void);
                    bool setv(double v);
                    };

double fonteTensao::getv()//definindo que getv  é dessa class, pode ser que outrra classe tenha um metodo com mesmo nome
{

    return vout;
}

bool fonteTensao::setv(double v)
{
    if (v<vmin||v>vmax)
        return false;

    vout=v;
    return true;
}

//construtor sem parametros. funçao ou metodo para criar o objeto
 fonteTensao::fonteTensao(void)
{
    vout=5;
    vmin=0;
    vmax=15;
}

//construtor com parametros. funçao ou metodo para criar o objeto com parametros expecificados
 fonteTensao::fonteTensao(double valormin, double valormax)
{
    vmin=valormin;
    vmax=valormax;
    vout=5;
}

//destrutor.
 fonteTensao::~fonteTensao(void)
 {

 }


class resistor  {
                private:
                    double resistencia;
                    double potencia;
                    double tolerancia;

                public:
                    resistor(void);
                    resistor(double r);
                    double getr(void);
                    bool setr(double r);
                    double v(double i);
                    double i(double v);
                };

resistor::resistor(void)
{
    resistencia=0;
    potencia=1;
    tolerancia=0.1;
}

resistor::resistor(double r)
{
    resistencia=r;
    potencia=1;
    tolerancia=0.1;
}

double resistor::getr(void)
{
    return resistencia;
}

bool resistor::setr(double r)
{
    if (r<0||r>10000000)
        return false;
    resistencia=r;
    return true;
}

double resistor::v(double i)
{
    if (resistencia==0)
        return 0;
    return resistencia*i;
}

double resistor::i(double v)
{
    if (resistencia==0)
        return 0;
    return v/resistencia;
}


class ivet {
            private:
                int *dados;
                int tam;

            public:
                ivet(int tamanho);
                ~ivet(void);
                void seti(int pos, int valor);
                int geti(int pos);
            };

//exemplo de uso de destrutor e construtor
//construtor de vetor de dados
ivet::ivet(int tamanho)
{
    dados=new int[tamanho];
    if(dados==nullptr)
    {
        tam=0;
        return;
    }
    else
        tam=tamanho;
    for (int i=0;i<tam;i++)
    {
        dados[i]=0;
    }
}

void ivet::seti(int posicao, int valor)
{
    dados[posicao]=valor;
}

//destrutor para desalocar a memoria alocada
ivet::~ivet(void)
{
    delete(dados);
}

int main()
{
    fonteTensao V1;
    fonteTensao V2(-15,20);

    resistor R1;

    ivet vet1(1);
    vet1.seti(0,1);
    cout << vet1.geti() << endl;

    //usando uma classe:
/*
    cout << "Tensão de saída: " << V1.getv() << "V" << endl;
    V1.setv(10);
    cout << "Tensão de saída: " << V1.getv() << "V" << endl;
    //não funciona pq passa do limite definido no setv, não da erro, compila, mas não funciona
    //V1.setv(50);
    //correto a se fazer:
    if (!V1.setv(50))
        cerr << "Excedeu limite ajustado" << endl;

    cout << "Tensão de saída: " << V1.getv() << "V" << endl;
    V2.setv(-10);
    cout << "Tensão de saída: " << V2.getv() << "V" << endl;
*/
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    //usando interação de classes:

    double aux;
    cout << "Insira a tensão da fonte: ";
    cin >> aux;
    cout << endl;
    V1.setv(aux);

    cout << "Insira valor de R1: ";
    cin >> aux;
    cout << endl;
    R1.setr(aux);

    cout << "Corrente no resistor = " << R1.i(V1.getv()) << " A" << endl;

    return 0;
}
